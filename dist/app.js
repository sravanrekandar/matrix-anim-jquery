(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var $ = _interopRequire((typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null));

var _modelControls = require("./model-controls");

var generateMatrix = _modelControls.generateMatrix;
var printMatrix = _modelControls.printMatrix;

var _viewModelControls = require("./view-model-controls");

var generateViewModel = _viewModelControls.generateViewModel;
var nextViewModel = _viewModelControls.nextViewModel;

var _viewControls = require("./view-controls");

var createCellViews = _viewControls.createCellViews;
var updateCellPositions = _viewControls.updateCellPositions;

var _constants = require("./constants");

var CONTAINER_ID = _constants.CONTAINER_ID;
var CELL_PROPS = _constants.CELL_PROPS;
var GUTTER = _constants.GUTTER;

var animTimeInteral = undefined;

function startApp() {
  clearInterval(animTimeInteral);
  var ROWS = Number($("#row-count").val());
  var COLUMNS = Number($("#column-count").val());

  var container = $(CONTAINER_ID);
  container.empty();

  var cellSize = CELL_PROPS.cellSize;

  container.width(COLUMNS * cellSize + (COLUMNS + 1) * GUTTER);
  container.height(ROWS * cellSize + (ROWS + 1) * GUTTER);

  var matrix = generateMatrix(ROWS, COLUMNS);
  printMatrix(matrix);
  var viewModel = generateViewModel(matrix);

  createCellViews(container, viewModel);

  animTimeInteral = setInterval(function () {
    viewModel = nextViewModel(viewModel);
    updateCellPositions(viewModel);
  }, 1000);
}

$(function () {
  startApp();

  var start = function () {
    startApp();
  };
  $("#reset").click(start);

  $("#row-count, #column-count").change(start);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9tZWRpYS9zYXJhdmFuL0E0QUM2MTZDQUM2MTNBNDYvd29yayBhcmVhL0dJVC9tYXRyaXgtYW5pbS1qcXVlcnkvc3JjL2FwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztJQUFPLENBQUMsMkJBQU0sUUFBUTs7NkJBRXNCLGtCQUFrQjs7SUFBckQsY0FBYyxrQkFBZCxjQUFjO0lBQUUsV0FBVyxrQkFBWCxXQUFXOztpQ0FDYSx1QkFBdUI7O0lBQS9ELGlCQUFpQixzQkFBakIsaUJBQWlCO0lBQUUsYUFBYSxzQkFBYixhQUFhOzs0QkFDWSxpQkFBaUI7O0lBQTdELGVBQWUsaUJBQWYsZUFBZTtJQUFFLG1CQUFtQixpQkFBbkIsbUJBQW1COzt5QkFDSSxhQUFhOztJQUFyRCxZQUFZLGNBQVosWUFBWTtJQUFFLFVBQVUsY0FBVixVQUFVO0lBQUUsTUFBTSxjQUFOLE1BQU07O0FBRXpDLElBQUksZUFBZSxZQUFBLENBQUE7O0FBRW5CLFNBQVMsUUFBUSxHQUFHO0FBQ2xCLGVBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQTtBQUM5QixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUE7QUFDMUMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBOztBQUVoRCxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDakMsV0FBUyxDQUFDLEtBQUssRUFBRSxDQUFBOztNQUVULFFBQVEsR0FBSyxVQUFVLENBQXZCLFFBQVE7O0FBQ2hCLFdBQVMsQ0FBQyxLQUFLLENBQUMsQUFBQyxPQUFPLEdBQUcsUUFBUSxHQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQSxHQUFJLE1BQU0sQUFBQyxDQUFDLENBQUE7QUFDaEUsV0FBUyxDQUFDLE1BQU0sQ0FBQyxBQUFDLElBQUksR0FBRyxRQUFRLEdBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBLEdBQUksTUFBTSxBQUFDLENBQUMsQ0FBQTs7QUFFM0QsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUM1QyxhQUFXLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDbkIsTUFBSSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUE7O0FBRXpDLGlCQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFBOztBQUVyQyxpQkFBZSxHQUFHLFdBQVcsQ0FBQyxZQUFNO0FBQ2xDLGFBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDcEMsdUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUE7R0FDL0IsRUFBRSxJQUFJLENBQUMsQ0FBQTtDQUNUOztBQUVELENBQUMsQ0FBQyxZQUFNO0FBQ04sVUFBUSxFQUFFLENBQUE7O0FBRVYsTUFBTSxLQUFLLEdBQUcsWUFBTTtBQUNsQixZQUFRLEVBQUUsQ0FBQTtHQUNYLENBQUE7QUFDRCxHQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBOztBQUV4QixHQUFDLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDN0MsQ0FBQyxDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJCBmcm9tICdqcXVlcnknXG5cbmltcG9ydCB7IGdlbmVyYXRlTWF0cml4LCBwcmludE1hdHJpeCB9IGZyb20gJy4vbW9kZWwtY29udHJvbHMnXG5pbXBvcnQgeyBnZW5lcmF0ZVZpZXdNb2RlbCwgbmV4dFZpZXdNb2RlbCB9IGZyb20gJy4vdmlldy1tb2RlbC1jb250cm9scydcbmltcG9ydCB7IGNyZWF0ZUNlbGxWaWV3cywgdXBkYXRlQ2VsbFBvc2l0aW9ucyB9IGZyb20gJy4vdmlldy1jb250cm9scydcbmltcG9ydCB7IENPTlRBSU5FUl9JRCwgQ0VMTF9QUk9QUywgR1VUVEVSIH0gZnJvbSAnLi9jb25zdGFudHMnXG5cbmxldCBhbmltVGltZUludGVyYWxcblxuZnVuY3Rpb24gc3RhcnRBcHAoKSB7XG4gIGNsZWFySW50ZXJ2YWwoYW5pbVRpbWVJbnRlcmFsKVxuICBjb25zdCBST1dTID0gTnVtYmVyKCQoJyNyb3ctY291bnQnKS52YWwoKSlcbiAgY29uc3QgQ09MVU1OUyA9IE51bWJlcigkKCcjY29sdW1uLWNvdW50JykudmFsKCkpXG5cbiAgY29uc3QgY29udGFpbmVyID0gJChDT05UQUlORVJfSUQpXG4gIGNvbnRhaW5lci5lbXB0eSgpXG5cbiAgY29uc3QgeyBjZWxsU2l6ZSB9ID0gQ0VMTF9QUk9QU1xuICBjb250YWluZXIud2lkdGgoKENPTFVNTlMgKiBjZWxsU2l6ZSkgKyAoKENPTFVNTlMgKyAxKSAqIEdVVFRFUikpXG4gIGNvbnRhaW5lci5oZWlnaHQoKFJPV1MgKiBjZWxsU2l6ZSkgKyAoKFJPV1MgKyAxKSAqIEdVVFRFUikpXG5cbiAgY29uc3QgbWF0cml4ID0gZ2VuZXJhdGVNYXRyaXgoUk9XUywgQ09MVU1OUylcbiAgcHJpbnRNYXRyaXgobWF0cml4KVxuICBsZXQgdmlld01vZGVsID0gZ2VuZXJhdGVWaWV3TW9kZWwobWF0cml4KVxuXG4gIGNyZWF0ZUNlbGxWaWV3cyhjb250YWluZXIsIHZpZXdNb2RlbClcblxuICBhbmltVGltZUludGVyYWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgdmlld01vZGVsID0gbmV4dFZpZXdNb2RlbCh2aWV3TW9kZWwpXG4gICAgdXBkYXRlQ2VsbFBvc2l0aW9ucyh2aWV3TW9kZWwpXG4gIH0sIDEwMDApXG59XG5cbiQoKCkgPT4ge1xuICBzdGFydEFwcCgpXG5cbiAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7XG4gICAgc3RhcnRBcHAoKVxuICB9XG4gICQoJyNyZXNldCcpLmNsaWNrKHN0YXJ0KVxuXG4gICQoJyNyb3ctY291bnQsICNjb2x1bW4tY291bnQnKS5jaGFuZ2Uoc3RhcnQpXG59KVxuIl19
},{"./constants":2,"./model-controls":3,"./view-controls":4,"./view-model-controls":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var CONTAINER_ID = "#matrix-container";

exports.CONTAINER_ID = CONTAINER_ID;
var CELL_PROPS = {
  cellTemplate: function (cell) {
    return "<div class=\"cell\">" + cell.text + "</cell>";
  },
  cellSize: 30 };

exports.CELL_PROPS = CELL_PROPS;
var GUTTER = 10;
exports.GUTTER = GUTTER;

},{}],3:[function(require,module,exports){
"use strict";

exports.generateMatrix = generateMatrix;
exports.printMatrix = printMatrix;
Object.defineProperty(exports, "__esModule", {
  value: true
});

function generateMatrix(ROWS, COLUMNS) {
  var matrix = [];
  var count = 0;
  for (var i = 0; i < ROWS; i++) {
    var row = [];
    for (var j = 0; j < COLUMNS; j++) {
      row.push(++count);
    }
    matrix.push(row);
  }

  return matrix;
}

function printMatrix(matrix) {
  var str = "";
  for (var i = 0; i < matrix.length; i++) {
    for (var j = 0; j < matrix[i].length; j++) {
      str += "\t" + matrix[i][j];
    }
    str += "\n";
  }

  return str;
}

},{}],4:[function(require,module,exports){
(function (global){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

exports.createCellViews = createCellViews;
exports.updateCellPositions = updateCellPositions;
Object.defineProperty(exports, "__esModule", {
  value: true
});

var $ = _interopRequire((typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null));

var _constants = require("./constants");

var CELL_PROPS = _constants.CELL_PROPS;
var GUTTER = _constants.GUTTER;

function getCellViewPosition(cell) {
  var cellSize = CELL_PROPS.cellSize;

  var top = cellSize * cell.position.x + (cell.position.x + 1) * GUTTER;
  var left = cellSize * cell.position.y + (cell.position.y + 1) * GUTTER;
  return {
    top: "" + top + "px",
    left: "" + left + "px" };
}

function createCellViews(container, viewModel) {
  var cellTemplate = CELL_PROPS.cellTemplate;

  for (var i = 0; i < viewModel.length; i++) {
    var cell = viewModel[i];
    var newCellView = $(cellTemplate({ text: cell.text }));
    newCellView.css(getCellViewPosition(cell));
    newCellView.prop("id", cell.id);
    container.append(newCellView);
  }
}

function updateCellPositions(viewModel) {
  viewModel.forEach(function (cell) {
    $("#" + cell.id).animate(getCellViewPosition(cell), 700);
  });
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9tZWRpYS9zYXJhdmFuL0E0QUM2MTZDQUM2MTNBNDYvd29yayBhcmVhL0dJVC9tYXRyaXgtYW5pbS1qcXVlcnkvc3JjL3ZpZXctY29udHJvbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFhZ0IsZUFBZSxHQUFmLGVBQWU7UUFZZixtQkFBbUIsR0FBbkIsbUJBQW1COzs7OztJQXpCNUIsQ0FBQywyQkFBTSxRQUFROzt5QkFDYSxhQUFhOztJQUF2QyxVQUFVLGNBQVYsVUFBVTtJQUFFLE1BQU0sY0FBTixNQUFNOztBQUUzQixTQUFTLG1CQUFtQixDQUFDLElBQUksRUFBRTtNQUN6QixRQUFRLEdBQUssVUFBVSxDQUF2QixRQUFROztBQUNoQixNQUFNLEdBQUcsR0FBRyxBQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQSxHQUFJLE1BQU0sQUFBQyxDQUFBO0FBQzNFLE1BQU0sSUFBSSxHQUFHLEFBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLEdBQUksTUFBTSxBQUFDLENBQUE7QUFDNUUsU0FBTztBQUNMLE9BQUcsT0FBSyxHQUFHLE9BQUk7QUFDZixRQUFJLE9BQUssSUFBSSxPQUFJLEVBQ2xCLENBQUE7Q0FDRjs7QUFFTSxTQUFTLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFO01BQzVDLFlBQVksR0FBSyxVQUFVLENBQTNCLFlBQVk7O0FBRXBCLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3pDLFFBQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6QixRQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDeEQsZUFBVyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQzFDLGVBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUMvQixhQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0dBQzlCO0NBQ0Y7O0FBRU0sU0FBUyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUU7QUFDN0MsV0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUksRUFBSztBQUMxQixLQUFDLE9BQUssSUFBSSxDQUFDLEVBQUUsQ0FBRyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtHQUN6RCxDQUFDLENBQUE7Q0FDSCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IHsgQ0VMTF9QUk9QUywgR1VUVEVSIH0gZnJvbSAnLi9jb25zdGFudHMnXG5cbmZ1bmN0aW9uIGdldENlbGxWaWV3UG9zaXRpb24oY2VsbCkge1xuICBjb25zdCB7IGNlbGxTaXplIH0gPSBDRUxMX1BST1BTXG4gIGNvbnN0IHRvcCA9IChjZWxsU2l6ZSAqIGNlbGwucG9zaXRpb24ueCkgKyAoKGNlbGwucG9zaXRpb24ueCArIDEpICogR1VUVEVSKVxuICBjb25zdCBsZWZ0ID0gKGNlbGxTaXplICogY2VsbC5wb3NpdGlvbi55KSArICgoY2VsbC5wb3NpdGlvbi55ICsgMSkgKiBHVVRURVIpXG4gIHJldHVybiB7XG4gICAgdG9wOiBgJHt0b3B9cHhgLFxuICAgIGxlZnQ6IGAke2xlZnR9cHhgLFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDZWxsVmlld3MoY29udGFpbmVyLCB2aWV3TW9kZWwpIHtcbiAgY29uc3QgeyBjZWxsVGVtcGxhdGUgfSA9IENFTExfUFJPUFNcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZpZXdNb2RlbC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNlbGwgPSB2aWV3TW9kZWxbaV1cbiAgICBjb25zdCBuZXdDZWxsVmlldyA9ICQoY2VsbFRlbXBsYXRlKHsgdGV4dDogY2VsbC50ZXh0IH0pKVxuICAgIG5ld0NlbGxWaWV3LmNzcyhnZXRDZWxsVmlld1Bvc2l0aW9uKGNlbGwpKVxuICAgIG5ld0NlbGxWaWV3LnByb3AoJ2lkJywgY2VsbC5pZClcbiAgICBjb250YWluZXIuYXBwZW5kKG5ld0NlbGxWaWV3KVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDZWxsUG9zaXRpb25zKHZpZXdNb2RlbCkge1xuICB2aWV3TW9kZWwuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICQoYCMke2NlbGwuaWR9YCkuYW5pbWF0ZShnZXRDZWxsVmlld1Bvc2l0aW9uKGNlbGwpLCA3MDApXG4gIH0pXG59XG4iXX0=
},{"./constants":2}],5:[function(require,module,exports){
(function (global){
"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

exports.generateViewModel = generateViewModel;
exports.nextViewModel = nextViewModel;
Object.defineProperty(exports, "__esModule", {
  value: true
});

var R = _interopRequire((typeof window !== "undefined" ? window['R'] : typeof global !== "undefined" ? global['R'] : null));

function addElementToList(list, row, column, matrix) {
  var hasElement = list.find(function (el) {
    return el.id === "cell-" + row + "-" + column;
  });
  if (!hasElement) {
    list.push({
      id: "cell-" + row + "-" + column,
      text: matrix[row][column],
      position: {
        x: row,
        y: column } });
  }
}

function generateViewModel(matrix) {
  var ROWS = matrix.length;
  var COLUMNS = matrix[0].length;

  var numberOfCircles = Math.ceil(Math.min(ROWS, COLUMNS) / 2);

  var allCircleElements = [];
  var row = undefined;
  var column = undefined;

  for (var circle = 0; circle < numberOfCircles; circle++) {
    (function (circle) {
      var circleElements = [];

      // Top Edge
      /*
        ,________________,
        |  00    01   02 |  03
        '----------------'
           10    11   12    13
           20    21   22    23
           30    31   32    33
      */
      row = circle;
      for (column = circle; column < COLUMNS - circle - 1; column++) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Right Edge
      /*
                        ,_____,
        00    01   02   |  03 |
        10    11   12   |  13 |
        20    21   22   |  23 |
                        `-----'
        30    31   32    33
      */
      column = COLUMNS - circle - 1;
      for (row = circle; row < ROWS - circle - 1; row++) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Bottom Edge
      /*
        00    01   02    03
        10    11   12    13
        20    21   22    23
            ,________________,
        30  |  31   32    33 |
            `----------------'
      */
      row = ROWS - circle - 1;
      for (column = COLUMNS - circle - 1; column > circle; column--) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Left Edge
      /*
          00     01   02    03
        ,____,
        | 10 |   11   12    13
        | 20 |   21   22    23
        | 30 |   31   32    33
        '----'
      */
      column = circle;
      for (row = ROWS - circle - 1; row > circle; row--) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Center cell
      if (ROWS === COLUMNS && ROWS % 2 === 1 && circle === numberOfCircles - 1) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Mapping next and prev nodes
      circleElements.forEach(function (el, idx) {
        var cell = el;
        if (cell.disbleAnimations) {
          cell.nextPosition = el.position;
          cell.prevPosition = el.position;
        }

        cell.nextPosition = circleElements[(idx + 1) % circleElements.length].position;
        cell.prevPosition = circleElements[Math.abs(circleElements.length + idx - 1) % circleElements.length].position;
      });

      allCircleElements = allCircleElements.concat(circleElements);
    })(circle);
  }

  return allCircleElements;
}

function nextViewModel(model) {
  var nextModel = model.map(function (item) {
    var nextElement = model.find(function (el) {
      return R.equals(el.position, item.nextPosition);
    });
    nextElement = R.clone(nextElement);
    nextElement.text = item.text;
    nextElement.id = item.id;
    return nextElement;
  });

  return nextModel;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
