(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _modelControls = require("./model-controls");

var generateMatrix = _modelControls.generateMatrix;
var printMatrix = _modelControls.printMatrix;

var _viewModelControls = require("./view-model-controls");

var generateViewModel = _viewModelControls.generateViewModel;
var nextViewModel = _viewModelControls.nextViewModel;

var _viewControls = require("./view-controls");

var createCellViews = _viewControls.createCellViews;
var updateCellPositions = _viewControls.updateCellPositions;

var _constants = require("./constants");

var CONTAINER_ID = _constants.CONTAINER_ID;
var CELL_PROPS = _constants.CELL_PROPS;
var GUTTER = _constants.GUTTER;

var animTimeInteral = undefined;

function startApp() {
  clearInterval(animTimeInteral);
  var ROWS = Number($("#row-count").val());
  var COLUMNS = Number($("#column-count").val());

  var container = $(CONTAINER_ID);
  container.empty();

  var cellSize = CELL_PROPS.cellSize;

  container.width(COLUMNS * cellSize + (COLUMNS + 1) * GUTTER);
  container.height(ROWS * cellSize + (ROWS + 1) * GUTTER);

  var matrix = generateMatrix(ROWS, COLUMNS);
  printMatrix(matrix);
  var viewModel = generateViewModel(matrix);

  createCellViews(container, viewModel);

  animTimeInteral = setInterval(function () {
    viewModel = nextViewModel(viewModel);
    updateCellPositions(viewModel);
  }, 1000);
}

$(function () {
  startApp();

  var start = function () {
    startApp();
  };
  $("#reset").click(start);

  $("#row-count, #column-count").change(start);
});

},{"./constants":2,"./model-controls":3,"./view-controls":4,"./view-model-controls":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var CONTAINER_ID = "#matrix-container";

exports.CONTAINER_ID = CONTAINER_ID;
var CELL_PROPS = {
  cellTemplate: function (cell) {
    return "<div class=\"cell\">" + cell.text + "</cell>";
  },
  cellSize: 30 };

exports.CELL_PROPS = CELL_PROPS;
var GUTTER = 10;
exports.GUTTER = GUTTER;

},{}],3:[function(require,module,exports){
"use strict";

exports.generateMatrix = generateMatrix;
exports.printMatrix = printMatrix;
Object.defineProperty(exports, "__esModule", {
  value: true
});

function generateMatrix(ROWS, COLUMNS) {
  var matrix = [];
  var count = 0;
  for (var i = 0; i < ROWS; i++) {
    var row = [];
    for (var j = 0; j < COLUMNS; j++) {
      row.push(++count);
    }
    matrix.push(row);
  }

  return matrix;
}

function printMatrix(matrix) {
  var str = "";
  for (var i = 0; i < matrix.length; i++) {
    for (var j = 0; j < matrix[i].length; j++) {
      str += "\t" + matrix[i][j];
    }
    str += "\n";
  }

  return str;
}

},{}],4:[function(require,module,exports){
"use strict";

exports.createCellViews = createCellViews;
exports.updateCellPositions = updateCellPositions;
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require("./constants");

var CELL_PROPS = _constants.CELL_PROPS;
var GUTTER = _constants.GUTTER;

function getCellViewPosition(cell) {
  var cellSize = CELL_PROPS.cellSize;

  var top = cellSize * cell.position.x + (cell.position.x + 1) * GUTTER;
  var left = cellSize * cell.position.y + (cell.position.y + 1) * GUTTER;
  return {
    top: "" + top + "px",
    left: "" + left + "px" };
}

function createCellViews(container, viewModel) {
  var cellTemplate = CELL_PROPS.cellTemplate;

  for (var i = 0; i < viewModel.length; i++) {
    var cell = viewModel[i];
    var newCellView = $(cellTemplate({ text: cell.text }));
    newCellView.css(getCellViewPosition(cell));
    newCellView.prop("id", cell.id);
    container.append(newCellView);
  }
}

function updateCellPositions(viewModel) {
  viewModel.forEach(function (cell) {
    $("#" + cell.id).animate(getCellViewPosition(cell), 700);
  });
}

},{"./constants":2}],5:[function(require,module,exports){
"use strict";

exports.generateViewModel = generateViewModel;
exports.nextViewModel = nextViewModel;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function addElementToList(list, row, column, matrix) {
  var hasElement = list.find(function (el) {
    return el.id === "cell-" + row + "-" + column;
  });
  if (!hasElement) {
    list.push({
      id: "cell-" + row + "-" + column,
      text: matrix[row][column],
      position: {
        x: row,
        y: column } });
  }
}

function generateViewModel(matrix) {
  var ROWS = matrix.length;
  var COLUMNS = matrix[0].length;

  var numberOfCircles = Math.ceil(Math.min(ROWS, COLUMNS) / 2);

  var allCircleElements = [];
  var row = undefined;
  var column = undefined;

  for (var circle = 0; circle < numberOfCircles; circle++) {
    (function (circle) {
      var circleElements = [];

      // Top Edge
      /*
        ,________________,
        |  00    01   02 |  03
        '----------------'
           10    11   12    13
           20    21   22    23
           30    31   32    33
      */
      row = circle;
      for (column = circle; column < COLUMNS - circle - 1; column++) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Right Edge
      /*
                        ,_____,
        00    01   02   |  03 |
        10    11   12   |  13 |
        20    21   22   |  23 |
                        `-----'
        30    31   32    33
      */
      column = COLUMNS - circle - 1;
      for (row = circle; row < ROWS - circle - 1; row++) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Bottom Edge
      /*
        00    01   02    03
        10    11   12    13
        20    21   22    23
            ,________________,
        30  |  31   32    33 |
            `----------------'
      */
      row = ROWS - circle - 1;
      for (column = COLUMNS - circle - 1; column > circle; column--) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Left Edge
      /*
          00     01   02    03
        ,____,
        | 10 |   11   12    13
        | 20 |   21   22    23
        | 30 |   31   32    33
        '----'
      */
      column = circle;
      for (row = ROWS - circle - 1; row > circle; row--) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Center cell
      if (ROWS === COLUMNS && ROWS % 2 === 1 && circle === numberOfCircles - 1) {
        addElementToList(circleElements, row, column, matrix);
      }

      // Mapping next and prev nodes
      circleElements.forEach(function (el, idx) {
        var cell = el;
        if (cell.disbleAnimations) {
          cell.nextPosition = el.position;
          cell.prevPosition = el.position;
        }

        cell.nextPosition = circleElements[(idx + 1) % circleElements.length].position;
        cell.prevPosition = circleElements[Math.abs(circleElements.length + idx - 1) % circleElements.length].position;
      });

      allCircleElements = allCircleElements.concat(circleElements);
    })(circle);
  }

  return allCircleElements;
}

function nextViewModel(model) {
  var nextModel = model.map(function (item) {
    var nextElement = model.find(function (el) {
      return R.equals(el.position, item.nextPosition);
    });
    nextElement = R.clone(nextElement);
    nextElement.text = item.text;
    nextElement.id = item.id;
    return nextElement;
  });

  return nextModel;
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
